{"version":3,"sources":["images/myface-logo2.png","Home.js","contact.js","portfolio.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomeComponent","to","class","src","logo","alt","this","makenavbar","href","target","React","Component","contact","portfolio","url","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,0C,2PC2C5BC,E,2KAnCX,OACE,6BACE,kBAAC,IAAD,CAAMC,GAAG,IAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,aACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,c,+BAMJ,OACE,yBAAKC,MAAM,aACT,gCACE,yBAAKC,IAAKC,IAAMC,IAAI,+BAGrBC,KAAKC,aAEN,8BACE,oDACA,8EACA,uDACA,uBAAGC,KAAK,8CAA8CC,OAAO,UAA7D,uBAKF,gCACE,qG,GA9BkBC,IAAMC,WCwDnBC,E,2KAtDX,OACE,6BACE,kBAAC,IAAD,CAAMX,GAAG,IAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,aACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,c,+BAMJ,OACE,yBAAKC,MAAM,aACT,gCACE,yBAAKC,IAAKC,IAAMC,IAAI,+BAGrBC,KAAKC,aAEN,8BACE,2CACA,uFAC4D,IAC1D,8CAFF,OAE6B,yCAF7B,WAEuD,qCAFvD,KAIA,yCAEE,uBACEC,KAAK,8CACLC,OAAO,UAFT,uBAOF,qCACU,IACR,uBACED,KAAK,yDACLC,OAAO,UAFT,gCASJ,8BAEA,gCACE,qG,GAjDYC,IAAMC,W,QCiDbE,E,2KA9CX,OACE,6BACE,kBAAC,IAAD,CAAMZ,GAAG,IAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,aACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,c,+BAMJ,OACE,yBAAKC,MAAM,aACT,gCACE,yBAAKC,IAAKC,IAAMC,IAAI,+BAGrBC,KAAKC,aAEN,8BACE,0CACA,2BACE,kBAAC,IAAD,CACEO,IAAI,8BACJC,SAAU,IACVC,aAAa,EACbC,iBAAiB,MACjBC,SAAS,GACTC,cAAY,EACZC,UAAW,aACXC,UAAW,aACXC,cAAe,aACfC,UAAW,iBAKjB,8BAEA,gCACE,qG,GAzCcb,IAAMC,W,OCUfa,MAXf,WACE,OACE,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW3B,IACjC,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,aAAaC,UAAWd,IAC1C,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,WAAWC,UAAWf,MCC1BgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,CAAeC,SAAUC,SACvB,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d6bc5005.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/myface-logo2.b8e1efa3.png\";","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"./style.css\";\r\nimport logo from \"./images/myface-logo2.png\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass HomeComponent extends React.Component {\r\n  makenavbar() {\r\n    return (\r\n      <nav>\r\n        <Link to=\"\">HOME</Link>\r\n        <Link to=\"portfolio\">PORTFOLIO</Link>\r\n        <Link to=\"contact\">CONTACT</Link>\r\n      </nav>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"container\">\r\n        <header>\r\n          <img src={logo} alt=\"Logo for AintNoPaintSaint\" />\r\n        </header>\r\n\r\n        {this.makenavbar()}\r\n\r\n        <main>\r\n          <h1>AINT NO PAINT SAINT.</h1>\r\n          <p>Digital Art | Paint | Tattoo Designs | Doodles </p>\r\n          <p> Follow us on Instagram </p>\r\n          <a href=\"https://www.instagram.com/aintnopaintsaint/\" target=\"_blank\">\r\n            @aintnotpaintsaint\r\n          </a>\r\n        </main>\r\n\r\n        <footer>\r\n          <p>Markham, ON. CANADA | aintnotpaintsaint.com | Copyright 2020©</p>\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomeComponent;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"./style.css\";\r\nimport logo from \"./images/myface-logo2.png\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass contact extends React.Component {\r\n  makenavbar() {\r\n    return (\r\n      <nav>\r\n        <Link to=\"\">HOME</Link>\r\n        <Link to=\"portfolio\">PORTFOLIO</Link>\r\n        <Link to=\"contact\">CONTACT</Link>\r\n      </nav>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"container\">\r\n        <header>\r\n          <img src={logo} alt=\"Logo for AintNoPaintSaint\" />\r\n        </header>\r\n\r\n        {this.makenavbar()}\r\n\r\n        <main>\r\n          <h1>CONTACT US.</h1>\r\n          <p>\r\n            For any art inquiries or questions, please contact us via{\" \"}\r\n            <im>Direct Message</im> on <im>Instagram</im> or via <im>Email</im>.\r\n          </p>\r\n          <p>\r\n            Instagram :\r\n            <a\r\n              href=\"https://www.instagram.com/aintnopaintsaint/\"\r\n              target=\"_blank\"\r\n            >\r\n              @aintnotpaintsaint\r\n            </a>\r\n          </p>\r\n          <p>\r\n            Email :{\" \"}\r\n            <a\r\n              href=\"mailto:aintnopaintsaint@gmail.com?Subject=Art Inquiry:\"\r\n              target=\"_blank\"\r\n            >\r\n              aintnopaintsaint@gmail.com\r\n            </a>\r\n          </p>\r\n        </main>\r\n\r\n        <div></div>\r\n\r\n        <footer>\r\n          <p>Markham, ON. CANADA | aintnotpaintsaint.com | Copyright 2020©</p>\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default contact;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"./style.css\";\r\nimport logo from \"./images/myface-logo2.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport InstagramEmbed from \"react-instagram-embed\";\r\n\r\nclass portfolio extends React.Component {\r\n  makenavbar() {\r\n    return (\r\n      <nav>\r\n        <Link to=\"\">HOME</Link>\r\n        <Link to=\"portfolio\">PORTFOLIO</Link>\r\n        <Link to=\"contact\">CONTACT</Link>\r\n      </nav>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"container\">\r\n        <header>\r\n          <img src={logo} alt=\"Logo for AintNoPaintSaint\" />\r\n        </header>\r\n\r\n        {this.makenavbar()}\r\n\r\n        <main>\r\n          <h1>PORTFOLIO.</h1>\r\n          <p>\r\n            <InstagramEmbed\r\n              url=\"https://instagr.am/p/Zw9o4/\"\r\n              maxWidth={320}\r\n              hideCaption={false}\r\n              containerTagName=\"div\"\r\n              protocol=\"\"\r\n              injectScript\r\n              onLoading={() => {}}\r\n              onSuccess={() => {}}\r\n              onAfterRender={() => {}}\r\n              onFailure={() => {}}\r\n            />\r\n          </p>\r\n        </main>\r\n\r\n        <div></div>\r\n\r\n        <footer>\r\n          <p>Markham, ON. CANADA | aintnotpaintsaint.com | Copyright 2020©</p>\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default portfolio;\r\n","import React from \"react\";\r\nimport HomeComponent from \"./Home\";\r\nimport contact from \"./contact\";\r\nimport portfolio from \"./portfolio\";\r\nimport { Switch, Route } from \"react-router\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Route exact path=\"/\" component={HomeComponent} />\r\n      <Route exact path=\"/portfolio\" component={portfolio} />\r\n      <Route exact path=\"/contact\" component={contact} />\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}